<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Commu_back.mapper.ReplyMapper">

	<!-- 댓글 총 개수 조회 -->
	<select id="selectReplyCount">
		SELECT count(*)
		FROM reply_tb
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 댓글 리스트 조회 -->
	<select id="selectReplyList" parameterType="hashmap"
	resultType="hashmap">
	-- 3차검색, 페이징 처리
	SELECT reply_no, r.user_no, u.user_chr, reply_content, reply_group,
	reply_dept, reply_regdate
	FROM(

		-- 2차검색, 정렬된 값에 순번을 재부여
		SELECT rownum rnum, reply_no, user_no, reply_content, reply_group,
		reply_dept, reply_regdate
		FROM(

			-- 1차검색, 검색 후 순차 혹은 역순으로 정렬
			SELECT reply_no, user_no, reply_content, reply_group, reply_dept,
			reply_regdate
			from reply_tb
			WHERE board_no = #{boardNo}
			
			<choose>
				<when test="reply_order == 'asc' ">
					ORDER BY reply_group asc, reply_no asc
					)
				</when>
				<when test="reply_order == 'desc' ">
					ORDER BY reply_group desc, reply_no desc
					)
					ORDER BY rownum desc 
				</when>
				<otherwise>
					ORDER BY reply_group asc, reply_no asc 
					)
				</otherwise>
			</choose>
			
	)r INNER JOIN user_tb u
	ON r.user_no = u.user_no
	WHERE rnum between #{startRow} and #{endRow} 
	</select>
	
	<!-- 댓글 추가 및 수정 -->
	<insert id="insertReply" parameterType="com.Commu_back.vo.ReplyVO">
		<![CDATA[
			MERGE INTO reply_tb 
			USING DUAL 
			on (#{replyNo} > 0)
			 
			-- 기존 댓글이 있을 때 댓글 갱신
			-- 인증값으로 받아온 유저 아이디를 유저 테이블에서 유저 번호로 조회 후
			-- 해당 게시글의 작성자와 같은지 매칭  
			WHEN MATCHED THEN
			UPDATE SET reply_content = #{replyContent}, 
						reply_updatedate = sysdate 
			WHERE reply_no = #{replyNo} 
			AND user_no = (
				SELECT user_no 
				FROM user_tb 
				WHERE LOWER(user_id) = LOWER(#{userId}) 
			) 
			
			-- 기존 댓글 없을 때 댓글 추가 
			WHEN NOT MATCHED THEN 
			INSERT (board_no, reply_group, reply_dept, reply_content, user_no) 
			VALUES ( #{boardNo}, #{replyGroup}, #{replyDept}, #{replyContent}, (
				SELECT user_no 
				FROM user_tb 
				WHERE LOWER(user_id) = LOWER(#{userId}) 
				) 
	        )
        ]]>
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply">
		delete from reply_tb 
		where reply_no = #{replyNo} 
		AND user_no = 
		(
			SELECT user_no 
			FROM user_tb 
			WHERE LOWER(user_id) = LOWER(#{userId})  
		) 
	</delete>
	
</mapper>