<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Commu_back.mapper.BoardMapper">

	<!-- 카테고리 추가 -->
	<insert id="insertCategory">
		INSERT INTO board_category_tb(board_category, board_category_desc)
		VALUES(LOWER(#{board_category}), #{board_category_desc})
	</insert>

	<!-- 카테고리 삭제 -->
	<delete id="deleteCategory">
		DELETE 
		FROM board_category_tb 
		WHERE board_category = LOWER(#{board_category}) 
	</delete>
	
	<!-- 카테고리 총 개수 조회 -->
	<select id="selectCategoryCount" resultType="int">
		SELECT count(*)
		FROM board_category_tb
		<choose>
			<when test="board_category == null AND test.equals('')" />
			<otherwise>
				WHERE LOWER(board_category_desc)
				LIKE LOWER('%'||#{board_category_desc}||'%')
			</otherwise>
		</choose>
	</select>

	<!-- 카테고리 목록 조회 -->
	<select id="selectCategoryList" resultType="hashmap">
		SELECT board_category_desc
		FROM board_category_tb
		<choose>
			<when test="board_category == null AND test.equals('')" />
			<otherwise>
				WHERE LOWER(board_category_desc)
				LIKE LOWER('%'||#{board_category_desc}||'%')
			</otherwise>
		</choose>
		WHERE rownum BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 조회수 증가 -->
	<update id="updateBoardViews">
		UPDATE board_tb
		SET board_views = board_views + 1
		WHERE board_no = #{board_no}
	</update>
	
	<!-- 카테고리 이름 조회 -->
	<select id="selectCategoryDesc" resultType="String">
		SELECT board_category_desc 
		FROM board_category_tb 
		WHERE LOWER(board_category) = LOWER(#{board_category}) 
	</select>

	<!-- 게시글 총 개수 조회 -->
	<select id="selectBoardCount" parameterType='hashmap' 
		resultType="int">
		SELECT count(*) 
		FROM board_tb 
		<choose>
			<when test="board_category != 'all' AND board_category != null">
				WHERE LOWER(board_category) = LOWER(#{board_category}) 
			</when>
			<otherwise>
				WHERE 1 = 1
			</otherwise>
		</choose>
		<choose>
			<when test="target == null OR target == 'all' OR target == ''">
				AND (
				LOWER(board_title) LIKE LOWER('%'||#{keyword}||'%')
				OR LOWER(board_content) LIKE LOWER('%'||#{keyword}||'%') 
				OR user_no LIKE
					(
						SELECT user_no
						FROM user_tb
						WHERE LOWER(user_chr) LIKE LOWER('%'||#{keyword}||'%')
					)
				)
			</when>
			<when test="target == 'title' ">
				AND LOWER(board_title) LIKE LOWER('%'||#{keyword}||'%')
			</when>
			<when test="target == 'content' ">
				AND LOWER(board_content) LIKE LOWER('%'||#{keyword}||'%')
			</when>
			<when test="target == 'writer' ">
				AND user_no LIKE (
					SELECT user_no
					FROM user_tb
					WHERE LOWER(user_chr) = LOWER('%'||#{keyword}||'%')
				)
			</when>
			<otherwise />
		</choose>
	</select>

	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList" parameterType="hashmap"
		resultType="hashmap">
		-- 3차, 순번으로 정렬된 검색결과를 parameter 값에 따라 조회 
		-- 작성자의 별명을 뷰에 추가하기 위해 유저 테이블과 INNERJOIN 
		-- 이후 페이징을 위해 설정된 row 개수만큼 column을 반환   
		SELECT board_no, board_title, b.user_no, u.user_chr, board_views, board_good, board_regdate, 
		(SELECT count(*) FROM reply_tb WHERE board_no = t.board_no)reply_count 
		FROM (
			
			-- 2차, 페이징을 위한 순번 부여 
			SELECT rownum rnum, board_no, board_title, user_no, board_views, board_good, board_regdate 
			FROM (
				
				-- 1차, 타입별 키워드검색 후 글번호의 역순으로 정렬되지 않은 결과를 재정렬  
				-- 통합검색 및 카테고리별 검색 지원 
				SELECT board_no, board_title, user_no, board_views, board_good, board_regdate
				FROM board_tb 
		<choose>
			<when test="board_category != 'all' AND board_category != null">
				WHERE LOWER(board_category) = #{board_category}
			</when>
			<otherwise>
				WHERE 1 = 1
			</otherwise>
		</choose>
		<choose>
			<when test="target == null OR target == 'all' OR target == ''">
				AND (
					LOWER(board_title) LIKE LOWER('%'||#{keyword}||'%')
					OR LOWER(board_content) LIKE LOWER('%'||#{keyword}||'%')
					OR user_no LIKE
					(
						SELECT user_no
						FROM user_tb
						WHERE LOWER(user_chr) =
						LOWER('%'||#{keyword}||'%')
					)
				)
			</when>
			<when test="target == 'title' ">
				AND LOWER(board_title) LIKE LOWER('%'||#{keyword}||'%')
			</when>
			<when test="target == 'content' ">
				AND LOWER(board_content) LIKE LOWER('%'||#{keyword}||'%')
			</when>
			<when test="target == 'writer' ">
				AND user_no LIKE (
					SELECT user_no
					FROM user_tb
					WHERE
					LOWER(user_chr) = LOWER('%'||#{keyword}||'%')
				)
			</when>
			<otherwise />
		</choose>
				order by board_no desc
			)t 
		)b INNER JOIN user_tb u 
		ON b.user_no = u.user_no 
		WHERE rnum BETWEEN #{startRow} AND #{endRow} 
	</select>

	<!-- 게시글 조회 -->
	<select id="selectBoard" resultType="hashmap">
		SELECT board_title, b.user_no, user_chr, board_content, board_regdate, board_good, board_bad
		FROM board_tb b INNER JOIN user_tb u 
		ON b.user_no = u.user_no 
		WHERE board_no = #{board_no} 
	</select>

	<!-- 게시글 추가 -->
	<insert id="insertBoard" parameterType="com.Commu_back.vo.BoardVO">
		<![CDATA[
			MERGE INTO board_tb 
			USING DUAL 
			ON (#{board_no} > 0) 
			
			-- 기존 게시글이 있을 때 글 갱신 
			-- 인증값으로 받아온 유저 아이디를 유저 테이블에서 유저 번호로 조회 후
			-- 해당 게시글의 작성자와 같은지 매칭  
			WHEN MATCHED THEN
			UPDATE SET board_title = #{board_title}, 
						board_content = #{board_content}, 
						board_UPDATEdate = sysdate 
			WHERE board_no = #{board_no} 
			AND user_no = (
				SELECT user_no  
				FROM user_tb 
				WHERE LOWER(user_id) = LOWER(#{user_id}) 
			)
			
			-- 기존 게시글이 없을 때 글 추가 
			WHEN NOT MATCHED THEN 
			INSERT (board_title, board_content, board_category, user_no) 
			VALUES (#{board_title}, #{board_content}, #{board_category}, (
				SELECT user_no  
				FROM user_tb 
				WHERE LOWER(user_id) = LOWER(#{user_id})
				)
			) 
		]]>
		<selectKey resultType="int" keyProperty="board_no"
			order="AFTER">
			-- 기존 글이 존재하지 않는 경우 이미지 업로드시 필요한 글 번호를 반환 
			SELECT MAX(board_no) 
			FROM board_tb 
			WHERE board_category = #{board_category} 
		</selectKey>
	</insert>

	<!-- 게시글 삭제 -->
	<delete id="deleteBoard">
		-- 1. 인증값으로 받아온 회원 아이디를 유저 테이블과 매칭해 유저 번호를 불러옴
		-- 2. 게시글 테이블의 유저 번호와 조회된 번호가 같지 않으면 0을 반환 (성공시 1을 반환)
		DELETE FROM board_tb 
		WHERE board_no = #{board_no} 
		AND user_no = ( 
			SELECT user_no 
			FROM user_tb 
			WHERE LOWER(user_id) = LOWER(#{user_id})  
		)
	</delete>

</mapper>